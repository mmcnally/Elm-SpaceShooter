Elm.Ship = Elm.Ship || {};
Elm.Ship.make = function (_elm) {
   "use strict";
   _elm.Ship = _elm.Ship || {};
   if (_elm.Ship.values)
   return _elm.Ship.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Ship";
   var Basics = Elm.Basics.make(_elm);
   var Bullet = Elm.Bullet.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Keyboard || {};
   Keyboard.Keys = Elm.Keyboard.Keys.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Playground = Playground || {};
   Playground.Input = Elm.Playground.Input.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var createBullet = function (ship) {
      return _U.replace([["x"
                         ,ship.x]
                        ,["y",ship.y]
                        ,["vx",ship.vy]
                        ,["vy",ship.vy]
                        ,["speed",ship.speed]
                        ,["size",5]
                        ,["angle",ship.angle]
                        ,["birthtime",0]],
      Bullet.defaultBullet);
   };
   var getBullets = function (s) {
      return s.bullets;
   };
   var addBullet = function (ship) {
      return _U.replace([["bullets"
                         ,{ctor: "::"
                          ,_0: createBullet(ship)
                          ,_1: ship.bullets}]],
      ship);
   };
   var adjustAngle = F2(function (ship,
   num) {
      return function () {
         var ship$ = _U.replace([["angle"
                                 ,_U.cmp(ship.angle,
                                 2 * Basics.pi) > 0 ? 0 : _U.cmp(ship.angle,
                                 0) < 0 ? 2 * Basics.pi : ship.angle]],
         ship);
         return _U.replace([["angle"
                            ,_U.cmp(num,
                            0) > 0 ? ship$.angle - Basics.pi / 30 : ship$.angle + Basics.pi / 30]],
         ship$);
      }();
   });
   var maxSpeed = 5;
   var accelerate = function (ship) {
      return function () {
         var dir = ship.speed / Basics.abs(ship.speed);
         return !_U.eq(ship.accelerate,
         0) && _U.cmp(Basics.abs(ship.speed),
         Basics.abs(ship.accelerate)) < 0 ? _U.replace([["speed"
                                                        ,ship.accelerate]],
         ship) : !_U.eq(ship.accelerate,
         0) ? _U.replace([["speed"
                          ,_U.cmp(Basics.abs(ship.speed),
                          maxSpeed) < 0 ? ship.speed + Basics.abs(ship.speed) * ship.accelerate : dir * maxSpeed]],
         ship) : _U.replace([["speed"
                             ,_U.cmp(Basics.abs(ship.speed),
                             2.5e-2) < 0 ? 0 : ship.speed - ship.speed * 5.0e-3]],
         ship);
      }();
   };
   var physics = function (ship) {
      return function () {
         var ship$ = accelerate(ship);
         return _U.replace([["x"
                            ,ship$.x + ship$.vx * ship$.speed]
                           ,["y"
                            ,ship$.y + ship$.vy * ship$.speed]],
         ship$);
      }();
   };
   var update = F2(function (input,
   ship) {
      return function () {
         switch (input.ctor)
         {case "Key":
            return A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.arrowUp) ? _U.replace([["vx"
                                                   ,Basics.cos(ship.angle)]
                                                  ,["vy",Basics.sin(ship.angle)]
                                                  ,["accelerate",0.25]],
              ship) : A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.arrowDown) ? _U.replace([["vx"
                                                     ,Basics.cos(ship.angle)]
                                                    ,["vy"
                                                     ,Basics.sin(ship.angle)]
                                                    ,["accelerate",-0.25]],
              ship) : A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.arrowLeft) ? A2(adjustAngle,
              ship,
              -1) : A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.arrowRight) ? A2(adjustAngle,
              ship,
              1) : A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.space) ? addBullet(ship) : ship;
            case "Passive":
            return function () {
                 var ship$ = physics(ship);
                 return _U.replace([["accelerate"
                                    ,0]],
                 ship$);
              }();}
         return ship;
      }();
   });
   var renderHealth = function (_v3) {
      return function () {
         return _U.eq(_v3.damage,
         0) ? function () {
            var barSegment = A2(Graphics.Collage.outlined,
            Graphics.Collage.dashed(Color.red),
            A2(Graphics.Collage.rect,
            100,
            15));
            var bar = Graphics.Collage.group(_L.fromArray([barSegment
                                                          ,A2(Graphics.Collage.move,
                                                          {ctor: "_Tuple2"
                                                          ,_0: 110
                                                          ,_1: 0},
                                                          barSegment)
                                                          ,A2(Graphics.Collage.move,
                                                          {ctor: "_Tuple2"
                                                          ,_0: 220
                                                          ,_1: 0},
                                                          barSegment)
                                                          ,A2(Graphics.Collage.move,
                                                          {ctor: "_Tuple2"
                                                          ,_0: 330
                                                          ,_1: 0},
                                                          barSegment)
                                                          ,A2(Graphics.Collage.move,
                                                          {ctor: "_Tuple2"
                                                          ,_0: 440
                                                          ,_1: 0},
                                                          barSegment)]));
            return A2(Graphics.Collage.move,
            {ctor: "_Tuple2"
            ,_0: -230
            ,_1: -300},
            bar);
         }() : A2(Graphics.Collage.outlined,
         Graphics.Collage.dashed(Color.red),
         A2(Graphics.Collage.rect,
         200,
         200));
      }();
   };
   var render = function (ship) {
      return function () {
         var healthMeter = renderHealth(ship);
         return _L.fromArray([Graphics.Collage.move({ctor: "_Tuple2"
                                                    ,_0: ship.x
                                                    ,_1: ship.y})(Graphics.Collage.rotate(ship.angle)(Graphics.Collage.group(_L.fromArray([Graphics.Collage.filled(ship.color.body)(A2(Graphics.Collage.ngon,
                                                                                                                                          3,
                                                                                                                                          ship.size))
                                                                                                                                          ,Graphics.Collage.move({ctor: "_Tuple2"
                                                                                                                                                                 ,_0: ship.size * 0.1
                                                                                                                                                                 ,_1: 0})(Graphics.Collage.filled(ship.color.window)(A2(Graphics.Collage.ngon,
                                                                                                                                          3,
                                                                                                                                          ship.size * 0.7)))
                                                                                                                                          ,Graphics.Collage.filled(ship.color.body2)(A2(Graphics.Collage.ngon,
                                                                                                                                          3,
                                                                                                                                          ship.size * 0.2))]))))
                             ,Graphics.Collage.move({ctor: "_Tuple2"
                                                    ,_0: ship.x
                                                    ,_1: ship.y})(healthMeter)]);
      }();
   };
   var shipColor = {_: {}
                   ,body: Color.blue
                   ,body2: Color.green
                   ,window: Color.grey};
   var enemyShipColor = _U.replace([["body"
                                    ,Color.red]
                                   ,["body2",Color.orange]],
   shipColor);
   var enemy = {_: {}
               ,accelerate: 0
               ,angle: 0
               ,bullets: _L.fromArray([])
               ,color: enemyShipColor
               ,damage: 0
               ,size: 10
               ,speed: 2
               ,vx: 0
               ,vy: 0
               ,x: 0
               ,y: 0};
   var initialShip = {_: {}
                     ,accelerate: 0
                     ,angle: Basics.pi / 2
                     ,bullets: _L.fromArray([])
                     ,color: shipColor
                     ,damage: 0
                     ,size: 20
                     ,speed: 0
                     ,vx: 0
                     ,vy: 0
                     ,x: 0
                     ,y: 0};
   var ShipColor = F3(function (a,
   b,
   c) {
      return {_: {}
             ,body: a
             ,body2: c
             ,window: b};
   });
   var Ship = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return _U.insert("bullets",
                                       k,
                                       _U.insert("damage",
                                       j,
                                       _U.insert("accelerate",
                                       i,
                                       _U.insert("angle",
                                       h,
                                       _U.insert("size",
                                       g,
                                       _U.insert("speed",
                                       f,
                                       _U.insert("color",
                                       e,
                                       _U.insert("vy",
                                       d,
                                       _U.insert("vx",
                                       c,
                                       _U.insert("y",
                                       b,
                                       _U.insert("x",a,l)))))))))));
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   _elm.Ship.values = {_op: _op
                      ,shipColor: shipColor
                      ,enemyShipColor: enemyShipColor
                      ,enemy: enemy
                      ,initialShip: initialShip
                      ,render: render
                      ,renderHealth: renderHealth
                      ,maxSpeed: maxSpeed
                      ,accelerate: accelerate
                      ,physics: physics
                      ,adjustAngle: adjustAngle
                      ,addBullet: addBullet
                      ,getBullets: getBullets
                      ,createBullet: createBullet
                      ,update: update
                      ,Ship: Ship
                      ,ShipColor: ShipColor};
   return _elm.Ship.values;
};