Elm.Examples = Elm.Examples || {};
Elm.Examples.Increment = Elm.Examples.Increment || {};
Elm.Examples.Increment.make = function (_elm) {
   "use strict";
   _elm.Examples = _elm.Examples || {};
   _elm.Examples.Increment = _elm.Examples.Increment || {};
   if (_elm.Examples.Increment.values)
   return _elm.Examples.Increment.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Examples.Increment";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Keyboard || {};
   Keyboard.Keys = Elm.Keyboard.Keys.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Playground = Elm.Playground.make(_elm);
   var Playground = Playground || {};
   Playground.Input = Elm.Playground.Input.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var render = function (state) {
      return _L.fromArray([Graphics.Collage.toForm(Text.asText(state))]);
   };
   var update = F3(function (realworld,
   input,
   state) {
      return function () {
         switch (input.ctor)
         {case "Tap":
            return A2(Keyboard.Keys.equals,
              input._0,
              Keyboard.Keys.space) ? 0 : state;}
         return state + 1;
      }();
   });
   var main = Playground.play({_: {}
                              ,initialState: 0
                              ,render: render
                              ,update: update});
   _elm.Examples.Increment.values = {_op: _op
                                    ,update: update
                                    ,render: render
                                    ,main: main};
   return _elm.Examples.Increment.values;
};