Elm.Internal = Elm.Internal || {};
Elm.Internal.make = function (_elm) {
   "use strict";
   _elm.Internal = _elm.Internal || {};
   if (_elm.Internal.values)
   return _elm.Internal.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Internal";
   var Basics = Elm.Basics.make(_elm);
   var Char = Elm.Char.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Dict = Elm.Dict.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Keyboard = Elm.Keyboard.make(_elm);
   var Keyboard = Keyboard || {};
   Keyboard.Keys = Elm.Keyboard.Keys.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Mouse = Elm.Mouse.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Playground = Playground || {};
   Playground.Input = Elm.Playground.Input.make(_elm);
   var Set = Elm.Set.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var specialKeys = Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                 ,_0: 17
                                                 ,_1: Keyboard.Keys.ctrl}
                                                ,{ctor: "_Tuple2"
                                                 ,_0: 16
                                                 ,_1: Keyboard.Keys.shift}
                                                ,{ctor: "_Tuple2"
                                                 ,_0: 32
                                                 ,_1: Keyboard.Keys.space}
                                                ,{ctor: "_Tuple2"
                                                 ,_0: 13
                                                 ,_1: Keyboard.Keys.enter}]));
   var alphas$$ = _L.fromArray([Keyboard.Keys.a
                               ,Keyboard.Keys.b
                               ,Keyboard.Keys.c
                               ,Keyboard.Keys.d
                               ,Keyboard.Keys.e
                               ,Keyboard.Keys.f
                               ,Keyboard.Keys.g
                               ,Keyboard.Keys.h
                               ,Keyboard.Keys.i
                               ,Keyboard.Keys.j
                               ,Keyboard.Keys.k
                               ,Keyboard.Keys.l
                               ,Keyboard.Keys.m
                               ,Keyboard.Keys.n
                               ,Keyboard.Keys.o
                               ,Keyboard.Keys.p
                               ,Keyboard.Keys.q
                               ,Keyboard.Keys.r
                               ,Keyboard.Keys.s
                               ,Keyboard.Keys.t
                               ,Keyboard.Keys.u
                               ,Keyboard.Keys.v
                               ,Keyboard.Keys.w
                               ,Keyboard.Keys.x
                               ,Keyboard.Keys.y
                               ,Keyboard.Keys.z]);
   var alphas$ = A2(List.map,
   Char.toCode,
   _L.fromArray([_U.chr("a")
                ,_U.chr("b")
                ,_U.chr("c")
                ,_U.chr("d")
                ,_U.chr("e")
                ,_U.chr("f")
                ,_U.chr("g")
                ,_U.chr("h")
                ,_U.chr("i")
                ,_U.chr("j")
                ,_U.chr("k")
                ,_U.chr("l")
                ,_U.chr("m")
                ,_U.chr("n")
                ,_U.chr("o")
                ,_U.chr("p")
                ,_U.chr("q")
                ,_U.chr("r")
                ,_U.chr("s")
                ,_U.chr("t")
                ,_U.chr("u")
                ,_U.chr("v")
                ,_U.chr("w")
                ,_U.chr("x")
                ,_U.chr("y")
                ,_U.chr("z")]));
   var alphaKeys = Dict.fromList(A2(List.zip,
   alphas$,
   alphas$$));
   var arrowKeys = Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                               ,_0: 37
                                               ,_1: Keyboard.Keys.arrowLeft}
                                              ,{ctor: "_Tuple2"
                                               ,_0: 38
                                               ,_1: Keyboard.Keys.arrowUp}
                                              ,{ctor: "_Tuple2"
                                               ,_0: 39
                                               ,_1: Keyboard.Keys.arrowRight}
                                              ,{ctor: "_Tuple2"
                                               ,_0: 40
                                               ,_1: Keyboard.Keys.arrowDown}]));
   var numbers$$ = _L.fromArray([Keyboard.Keys.zero
                                ,Keyboard.Keys.one
                                ,Keyboard.Keys.two
                                ,Keyboard.Keys.three
                                ,Keyboard.Keys.four
                                ,Keyboard.Keys.five
                                ,Keyboard.Keys.six
                                ,Keyboard.Keys.seven
                                ,Keyboard.Keys.eight
                                ,Keyboard.Keys.nine]);
   var numbers$ = A2(List.map,
   Char.toCode,
   _L.fromArray([_U.chr("0")
                ,_U.chr("1")
                ,_U.chr("2")
                ,_U.chr("3")
                ,_U.chr("4")
                ,_U.chr("5")
                ,_U.chr("6")
                ,_U.chr("7")
                ,_U.chr("8")
                ,_U.chr("9")]));
   var numbers = Dict.fromList(A2(List.zip,
   numbers$,
   numbers$$));
   var keys = A3(List.foldr,
   Dict.union,
   Dict.empty,
   _L.fromArray([alphaKeys
                ,specialKeys
                ,arrowKeys
                ,numbers]));
   var toKey = function (code) {
      return A2(Dict.get,
      code,
      keys);
   };
   var toKeys = function ($) {
      return Maybe.justs(List.map(toKey)($));
   };
   var keysDown = A2(Signal._op["<~"],
   function ($) {
      return List.map(Playground.Input.Key)(toKeys($));
   },
   Keyboard.keysDown);
   var lastPressed = function () {
      var match = F2(function (c,
      d) {
         return A2(Set.member,
         c,
         Set.fromList(d));
      });
      var matchSig = A2(Signal._op["~"],
      A2(Signal._op["<~"],
      match,
      Keyboard.lastPressed),
      Signal.merges(_L.fromArray([Keyboard.keysDown
                                 ,A2(Signal.sampleOn,
                                 A2(Time.delay,
                                 1,
                                 Keyboard.keysDown),
                                 Signal.constant(_L.fromArray([])))])));
      return A2(Signal._op["<~"],
      function (c) {
         return List.map(Playground.Input.Tap)(toKeys(_L.fromArray([c])));
      },
      A3(Signal.keepWhen,
      matchSig,
      0,
      Keyboard.lastPressed));
   }();
   var toInputs = F3(function (t,
   click,
   keys) {
      return {ctor: "::"
             ,_0: Playground.Input.Passive(t)
             ,_1: {ctor: "::"
                  ,_0: click
                  ,_1: keys}};
   });
   var withRate = function (rate) {
      return function () {
         var rate$ = Time.fps(rate);
         return A2(Signal._op["~"],
         A2(Signal._op["~"],
         A2(Signal._op["<~"],
         toInputs,
         rate$),
         A2(Signal.sampleOn,
         Mouse.clicks,
         Signal.constant(Playground.Input.MouseDown))),
         keysDown);
      }();
   };
   var singleton = function (x) {
      return _L.fromArray([x]);
   };
   var click = A2(Signal._op["<~"],
   singleton,
   A2(Signal.sampleOn,
   Mouse.clicks,
   Signal.constant(Playground.Input.Click)));
   var inputs = function (rate) {
      return Signal.merges(_L.fromArray([click
                                        ,lastPressed
                                        ,withRate(rate)]));
   };
   var updater = F3(function (update,
   _v0,
   state) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A3(List.foldl,
              update(_v0._0),
              state,
              _v0._1);}
         _E.Case($moduleName,
         "on line 31, column 33 to 59");
      }();
   });
   var toRealWorld = F2(function (_v4,
   _v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v4.ctor)
                 {case "_Tuple2":
                    return function () {
                         var right = Basics.toFloat(_v4._0) / 2;
                         var left = 0 - right;
                         var mouseX = Basics.toFloat(_v5._0) + left;
                         var top = Basics.toFloat(_v4._1) / 2;
                         var bottom = 0 - top;
                         var mouseY = top - Basics.toFloat(_v5._1);
                         return {_: {}
                                ,bottom: bottom
                                ,left: left
                                ,mouse: {_: {}
                                        ,x: mouseX
                                        ,y: mouseY}
                                ,right: right
                                ,top: top};
                      }();}
                 _E.Case($moduleName,
                 "between lines 15 and 25");
              }();}
         _E.Case($moduleName,
         "between lines 15 and 25");
      }();
   });
   var realworld = A2(Signal._op["~"],
   A2(Signal._op["<~"],
   toRealWorld,
   Window.dimensions),
   Mouse.position);
   _elm.Internal.values = {_op: _op
                          ,toRealWorld: toRealWorld
                          ,realworld: realworld
                          ,updater: updater
                          ,inputs: inputs
                          ,singleton: singleton
                          ,click: click
                          ,toInputs: toInputs
                          ,withRate: withRate
                          ,lastPressed: lastPressed
                          ,keysDown: keysDown
                          ,keys: keys
                          ,numbers: numbers
                          ,numbers$: numbers$
                          ,numbers$$: numbers$$
                          ,arrowKeys: arrowKeys
                          ,alphaKeys: alphaKeys
                          ,alphas$: alphas$
                          ,alphas$$: alphas$$
                          ,specialKeys: specialKeys
                          ,toKeys: toKeys
                          ,toKey: toKey};
   return _elm.Internal.values;
};