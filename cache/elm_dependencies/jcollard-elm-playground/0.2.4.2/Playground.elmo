Elm.Playground = Elm.Playground || {};
Elm.Playground.make = function (_elm) {
   "use strict";
   _elm.Playground = _elm.Playground || {};
   if (_elm.Playground.values)
   return _elm.Playground.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Playground";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var Internal = Elm.Internal.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Playground = Playground || {};
   Playground.Input = Elm.Playground.Input.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var Window = Elm.Window.make(_elm);
   var _op = {};
   var playWithRate = F2(function (rate,
   playground) {
      return function () {
         var ins = Internal.inputs(rate);
         var input = A2(Signal._op["~"],
         A2(Signal._op["<~"],
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         A2(Signal.sampleOn,
         ins,
         Internal.realworld)),
         ins);
         var update = Internal.updater(playground.update);
         return A2(Signal._op["~"],
         A2(Signal._op["<~"],
         Basics.uncurry(Graphics.Collage.collage),
         Window.dimensions),
         A2(Signal._op["<~"],
         playground.render,
         A3(Signal.foldp,
         update,
         playground.initialState,
         input)));
      }();
   });
   var play = playWithRate(60);
   var Playground = F3(function (a,
   b,
   c) {
      return {_: {}
             ,initialState: b
             ,render: a
             ,update: c};
   });
   _elm.Playground.values = {_op: _op
                            ,play: play
                            ,playWithRate: playWithRate
                            ,Playground: Playground};
   return _elm.Playground.values;
};