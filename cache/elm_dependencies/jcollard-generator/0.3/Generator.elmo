Elm.Generator = Elm.Generator || {};
Elm.Generator.make = function (_elm) {
   "use strict";
   _elm.Generator = _elm.Generator || {};
   if (_elm.Generator.values)
   return _elm.Generator.values;
   var _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Generator";
   var Basics = Elm.Basics.make(_elm);
   var Color = Elm.Color.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Collage = Elm.Graphics.Collage.make(_elm);
   var Graphics = Graphics || {};
   Graphics.Element = Elm.Graphics.Element.make(_elm);
   var List = Elm.List.make(_elm);
   var Maybe = Elm.Maybe.make(_elm);
   var Native = Native || {};
   Native.Json = Elm.Native.Json.make(_elm);
   var Native = Native || {};
   Native.Ports = Elm.Native.Ports.make(_elm);
   var Signal = Elm.Signal.make(_elm);
   var String = Elm.String.make(_elm);
   var Text = Elm.Text.make(_elm);
   var Time = Elm.Time.make(_elm);
   var _op = {};
   var Generator = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,next: b
             ,range: d
             ,split: c
             ,state: a};
   });
   var listOfHelp = F4(function (list,
   generate,
   n,
   generator) {
      return _U.cmp(n,
      1) < 0 ? {ctor: "_Tuple2"
               ,_0: List.reverse(list)
               ,_1: generator} : function () {
         var $ = generate(generator),
         value = $._0,
         generator$ = $._1;
         return A4(listOfHelp,
         {ctor: "::",_0: value,_1: list},
         generate,
         n - 1,
         generator$);
      }();
   });
   var listOf = listOfHelp(_L.fromArray([]));
   var minInt32 = -2147483648;
   var maxInt32 = 2147483647;
   var iLogBase = F2(function (b,
   i) {
      return _U.cmp(i,
      b) < 0 ? 1 : 1 + A2(iLogBase,
      b,
      i / b | 0);
   });
   var int32Range = F2(function (_v0,
   generator) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return _U.cmp(_v0._0,
              _v0._1) > 0 ? A2(int32Range,
              {ctor: "_Tuple2"
              ,_0: _v0._1
              ,_1: _v0._0},
              generator) : function () {
                 var b = 2147483561;
                 var f = F3(function (n,
                 acc,
                 state) {
                    return function () {
                       switch (n)
                       {case 0: return {ctor: "_Tuple2"
                                       ,_0: acc
                                       ,_1: state};}
                       return function () {
                          var $ = generator.next(state),
                          x = $._0,
                          state$ = $._1;
                          return A3(f,
                          n - 1,
                          x + acc * b,
                          state$);
                       }();
                    }();
                 });
                 var k = _v0._1 - _v0._0 + 1;
                 var n = A2(iLogBase,b,k);
                 var $ = A3(f,
                 n,
                 1,
                 generator.state),
                 v = $._0,
                 state$ = $._1;
                 return {ctor: "_Tuple2"
                        ,_0: _v0._0 + A2(Basics.mod,v,k)
                        ,_1: _U.replace([["state"
                                         ,state$]],
                        generator)};
              }();}
         _E.Case($moduleName,
         "between lines 73 and 86");
      }();
   });
   var floatRange = F2(function (_v5,
   generator) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            return _U.cmp(_v5._0,
              _v5._1) > 0 ? A2(floatRange,
              {ctor: "_Tuple2"
              ,_0: _v5._1
              ,_1: _v5._0},
              generator) : function () {
                 var $ = A2(int32Range,
                 {ctor: "_Tuple2"
                 ,_0: minInt32
                 ,_1: maxInt32},
                 generator),
                 x = $._0,
                 generator$ = $._1;
                 var scaled = (_v5._0 + _v5._1) / 2 + (_v5._1 - _v5._0) / Basics.toFloat(maxInt32 - minInt32) * Basics.toFloat(x);
                 return {ctor: "_Tuple2"
                        ,_0: scaled
                        ,_1: generator$};
              }();}
         _E.Case($moduleName,
         "between lines 117 and 122");
      }();
   });
   var $float = floatRange({ctor: "_Tuple2"
                           ,_0: 0
                           ,_1: 1});
   var int32 = int32Range({ctor: "_Tuple2"
                          ,_0: minInt32
                          ,_1: maxInt32});
   _elm.Generator.values = {_op: _op
                           ,Generator: Generator
                           ,int32: int32
                           ,int32Range: int32Range
                           ,$float: $float
                           ,floatRange: floatRange
                           ,listOf: listOf
                           ,minInt32: minInt32
                           ,maxInt32: maxInt32};
   return _elm.Generator.values;
};