{
  "name": "Generator",
  "document": "\nThe Generator Library provides an interface for generating pure pseudo-random\nsequences specified by a seed. This allows for repeatable sequences.\n\nTo get started immediately, check out the Generator.Standard module which is an \nimplemenation of this interface that provides an implementation of the Portable \nCombined Generator of L'Ecuyer for 32-bit computers. This implementation \nprovides enough randomness for most purposes.\n\n```\n-- Create a random number generator. This must be threaded through the program.\n-- This one is a \"standard generator\" (Generator.Standard) but other kinds of \n-- generators can be used.\ngen : Generator Standard\ngen = standard 42\n\n-- Create two random integers named x and y.\n(x, gen' ) = int gen\n(y, gen'') = int gen'\n```\n\nThe explicit use of a generator makes it possible to reproduce results\nby using the same seed. In the example above the seed was 42, and every time\nthat code runs it will give the same values for `x` and `y`.\n\n\n# Generating Numbers\n\nAll of these functions take a generator as an argument and step it forward,\nreturning the new version in their result. You generally should use the updated\ngenerator for subsequent computations.\n\n@docs int32, float, int32Range, floatRange, listOf\n\n# Generators\n\nYou need a generator to actually create random values. Each generator has different\nproperties, so be sure to use one appropriate for your use case. If none fit your usage\nyou can define your own by creating somithing with the `Generator` type.\n\n@docs Generator",
  "aliases": [
    {
      "name": "Generator",
      "comment": "Generator provides a common interface for number generators.\nTo create one, you must specify three components: next, split, range\n\n * The `state` field holds the current state of the generator.\n * The `next` operation returns an Int that is uniformly distributed in the\n   range returned by genRange (including both end points), and a new generator.\n * The `split` operation allows one to obtain two distinct random number\n   generators. This is very useful in functional programs (For example, when\n   passing a random number generator down to recursive calls), but very\n   little work has been done on statistically robust implementations of split.\n * The `range` operation yields the range of values returned by the generator.",
      "raw": "type Generator state = {\n  state : state,\n  next  : state -\u003e (Int, state),\n  split : state -\u003e (state, state),\n  range : state -\u003e (Int,Int)\n}",
      "typeVariables": [
        "state"
      ],
      "type": {
        "tag": "record",
        "fields": [
          [
            "state",
            {
              "tag": "var",
              "name": "state"
            }
          ],
          [
            "next",
            {
              "tag": "function",
              "args": [
                {
                  "tag": "var",
                  "name": "state"
                }
              ],
              "result": {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  },
                  {
                    "tag": "var",
                    "name": "state"
                  }
                ]
              }
            }
          ],
          [
            "split",
            {
              "tag": "function",
              "args": [
                {
                  "tag": "var",
                  "name": "state"
                }
              ],
              "result": {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "var",
                    "name": "state"
                  },
                  {
                    "tag": "var",
                    "name": "state"
                  }
                ]
              }
            }
          ],
          [
            "range",
            {
              "tag": "function",
              "args": [
                {
                  "tag": "var",
                  "name": "state"
                }
              ],
              "result": {
                "tag": "adt",
                "name": "_Tuple2",
                "args": [
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  },
                  {
                    "tag": "adt",
                    "name": "Int",
                    "args": []
                  }
                ]
              }
            }
          ]
        ],
        "extension": null
      }
    }
  ],
  "datatypes": [],
  "values": [
    {
      "name": "float",
      "comment": "Generate a float between 0 and 1 inclusive. \n\nA conceivable usage would be:\n\n      float gen == (0.1, gen')",
      "raw": "float : Generator g -\u003e (Float, Generator g)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Generator",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Generator",
              "args": [
                {
                  "tag": "var",
                  "name": "g"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "floatRange",
      "comment": "Generate a float in a given range. A usage of it\nwould look something like this:\n\n      floatRange (-10.0, 10.0) gen == (1.1618, gen')",
      "raw": "floatRange : (Float, Float) -\u003e Generator g -\u003e (Float, Generator g)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Float",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Generator",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Float",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Generator",
              "args": [
                {
                  "tag": "var",
                  "name": "g"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "int32",
      "comment": "Generate a 32-bit integer in range [minInt32,maxInt32] inclusive. \n\nA conceivable use of it would be:\n\n      int32 gen == (42, gen')",
      "raw": "int32 : Generator g -\u003e (Int, Generator g)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "Generator",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Generator",
              "args": [
                {
                  "tag": "var",
                  "name": "g"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "int32Range",
      "comment": "Generate an integer in a given range. For example, the expression\n`intRange (0,1) generator` will produce either a zero or a one. \n\nNote: the randomness is only enough for 32-bit values. Although this function \nwill continue to produce values outside of the range [minInt32, maxInt32],\nsufficient randomness is not guaranteed.",
      "raw": "int32Range : (Int, Int) -\u003e Generator g -\u003e (Int, Generator g)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "adt",
            "name": "_Tuple2",
            "args": [
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              },
              {
                "tag": "adt",
                "name": "Int",
                "args": []
              }
            ]
          },
          {
            "tag": "adt",
            "name": "Generator",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "Int",
              "args": []
            },
            {
              "tag": "adt",
              "name": "Generator",
              "args": [
                {
                  "tag": "var",
                  "name": "g"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "listOf",
      "comment": "Create a list of random values using a generator function.\n\n\n      -- list of 10 floats in range (0,1):\n      listOf float 10 gen\n\n      -- list of 42 integers in range [0,3]\n      listOf (intRange (0,3)) 42 gen\n\n      -- create a ten by ten list of list of random integers\n      listOf (listOf int 10) 10 gen\n\n      -- If you make a function to create random strings,\n      -- you can even create lists of those!\n      string : Generator g -\u003e (String, Generator g)\n      listOf string 5 gen",
      "raw": "listOf : (Generator g -\u003e (a, Generator g)) -\u003e\n         Int -\u003e Generator g -\u003e ([a], Generator g)",
      "type": {
        "tag": "function",
        "args": [
          {
            "tag": "function",
            "args": [
              {
                "tag": "adt",
                "name": "Generator",
                "args": [
                  {
                    "tag": "var",
                    "name": "g"
                  }
                ]
              }
            ],
            "result": {
              "tag": "adt",
              "name": "_Tuple2",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                },
                {
                  "tag": "adt",
                  "name": "Generator",
                  "args": [
                    {
                      "tag": "var",
                      "name": "g"
                    }
                  ]
                }
              ]
            }
          },
          {
            "tag": "adt",
            "name": "Int",
            "args": []
          },
          {
            "tag": "adt",
            "name": "Generator",
            "args": [
              {
                "tag": "var",
                "name": "g"
              }
            ]
          }
        ],
        "result": {
          "tag": "adt",
          "name": "_Tuple2",
          "args": [
            {
              "tag": "adt",
              "name": "_List",
              "args": [
                {
                  "tag": "var",
                  "name": "a"
                }
              ]
            },
            {
              "tag": "adt",
              "name": "Generator",
              "args": [
                {
                  "tag": "var",
                  "name": "g"
                }
              ]
            }
          ]
        }
      }
    },
    {
      "name": "maxInt32",
      "comment": "The maximum value for randomly generated for 32-bit ints",
      "raw": "maxInt32 : Int",
      "type": {
        "tag": "adt",
        "name": "Int",
        "args": []
      }
    },
    {
      "name": "minInt32",
      "comment": "The minimum value for randomly generated for 32-bit ints",
      "raw": "minInt32 : Int",
      "type": {
        "tag": "adt",
        "name": "Int",
        "args": []
      }
    }
  ]
}